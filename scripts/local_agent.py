import psutil
import time
import json
import requests
import platform
import os
from datetime import datetime

# === Configuration ===
CONFIG = {
    "token": "xxxxxx",   # read token from config file generated by update_agent.py
    "url": "agent:home", # pseudo-URL to identify local system
    "api_endpoint": "https://www.zapacit.com/api/index.php",
}

def collect_metrics():
    metrics = []

    # === CPU ===
    cpu_times = psutil.cpu_times_percent(interval=1)
    metrics.append({"name": "cpu_user", "value": round(cpu_times.user, 2)})
    metrics.append({"name": "cpu_system", "value": round(cpu_times.system, 2)})
    metrics.append({"name": "cpu_idle", "value": round(cpu_times.idle, 2)})
    metrics.append({"name": "cpu_iowait", "value": round(getattr(cpu_times, 'iowait', 0.0), 2)})

    # === Memory ===
    mem = psutil.virtual_memory()
    metrics.append({"name": "mem_total", "value": mem.total})
    metrics.append({"name": "mem_used", "value": mem.used})
    metrics.append({"name": "mem_available", "value": mem.available})

    swap = psutil.swap_memory()
    metrics.append({"name": "swap_total", "value": swap.total})
    metrics.append({"name": "swap_used", "value": swap.used})
    metrics.append({"name": "swap_free", "value": swap.free})

    # === Disk Usage ===
    for part in psutil.disk_partitions(all=False):
        try:
            usage = psutil.disk_usage(part.mountpoint)
            mount = part.mountpoint.replace('/', '_') or 'root'
            metrics.append({
                "name": f"disk_usage_percent{mount}",
                "value": usage.percent
            })
        except PermissionError:
            continue

    # === Network ===
    net_io = psutil.net_io_counters()
    metrics.append({"name": "net_bytes_sent", "value": net_io.bytes_sent})
    metrics.append({"name": "net_bytes_recv", "value": net_io.bytes_recv})

    # === Process/Thread Count ===
    metrics.append({"name": "num_processes", "value": len(psutil.pids())})
    metrics.append({"name": "num_threads", "value": sum(p.num_threads() for p in psutil.process_iter())})

    return metrics


def post_metrics(metrics):
    payload = {
        "token": CONFIG["token"],
        "url": CONFIG["url"],
        "metrics": metrics
    }

    #print(payload)

    try:
        response = requests.post(CONFIG["api_endpoint"], json=payload, timeout=10)
        if response.status_code == 200:
            print(f"[{datetime.now()}] Metrics posted successfully.")
        else:
            print(f"[{datetime.now()}] API error {response.status_code}: {response.text}")
    except Exception as e:
        print(f"[{datetime.now()}] Failed to send metrics: {e}")


def main():
    metrics = collect_metrics()
    post_metrics(metrics)


if __name__ == "__main__":
    main()
